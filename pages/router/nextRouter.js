import { useRouter } from "next/router";
import Head from "next/head";
import styles from "../../styles/Sidebar.module.css";

export default function nextRouter() {
  const router = useRouter();
  console.log({ router });
  return (
    <div>
      <Head>
        <title>Next/Router</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>next/router Kullanımı</h1>
      <h2>router.push Kullanımı</h2>
      <button
        className={styles.buton}
        type="button"
        onClick={() => router.push("/router")}
      >
        Ana Sayfa
      </button>
      <hr />
      <h2>router.replace Kullanımı</h2>
      <button
        className={styles.buton}
        type="button"
        onClick={() => router.push("/about")}
      >
        About
      </button>
      <hr />
      <h2>router.back Kullanımı</h2>
      <button
        className={styles.buton}
        type="button"
        onClick={() => router.back()}
      >
        Click here to go back
      </button>
      <hr />
      <h2>router.reload Kullanımı</h2>
      <button
        className={styles.buton}
        type="button"
        onClick={() => router.reload()}
      >
        Click Reload
      </button>
      <hr />
    </div>
  );
  /*
  ? router.replace(url, as, options)
  * router.replace API'si ile  router.push API'si tamamen aynıdır
  ? router.prefetch(url, as)
  * Daha hızlı istemci tarafı geçişleri için sayfaları önceden getirin. Bu yöntem, sayfaları otomatik olarak önceden getirmekle ilgilendiğinden next/link içermeyen gezinmeler için kullanışlıdır.
  ? router.beforePopState(cb)
  * Bazı durumlarda (örneğin, Özel Sunucu kullanıyorsanız), yönlendirici üzerinde işlem yapmadan önce popstate'i dinleyip bir şeyler yapmak isteyebilirsiniz .
  ? router.back()
  * Tarihte geri gidin. Tarayıcının geri düğmesine tıklamaya eşdeğerdir.
  ? router.reload()
  * Geçerli URL'yi yeniden yükleyin. Tarayıcının yenile düğmesini tıklamaya eşdeğerdir.
  */
}
